/*
 * Copyright (C) 2012 Trilarion
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.iremake.applications;

import icons.TestIOManager;
import java.awt.EventQueue;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.IntBuffer;
import java.nio.channels.FileChannel;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.WindowConstants;
import javax.swing.filechooser.FileFilter;
import org.tools.ui.utils.LookAndFeel;

/**
 * Reads the output from the python map import script and inserts a scenario
 * file accordingly.
 */
public class OriginalMapImportApp extends JFrame {

    private static final long serialVersionUID = 1L;
    private JFileChooser fileChooser;

    /**
     * Creates new form OriginalMapImportApp
     */
    public OriginalMapImportApp() {
        // form initialization
        initComponents();

        // icon
        setIconImage(TestIOManager.getAsImage("/icons/app.icon.png"));

        // init file chooser
        fileChooser = new JFileChooser();
        fileChooser.setMultiSelectionEnabled(false);
        fileChooser.setFileFilter(new FileFilter() {
            @Override
            public boolean accept(File f) {
                return f.isDirectory() || (f.getName().endsWith(".map") || f.getName().endsWith(".xml"));
            }

            @Override
            public String getDescription() {
                return "Map or Scenario Files";
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        importmapTextField = new JTextField();
        chooseImportmapButton = new JButton();
        scenarioTextField = new JTextField();
        chooseScenarioButton = new JButton();
        importButton = new JButton();
        progressBar = new JProgressBar();
        statusScrollPane = new JScrollPane();
        statusTextArea = new JTextArea();

        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Imperialism Map Import");
        setLocationByPlatform(true);
        setResizable(false);

        importmapTextField.setText("C:\\40_Programmieren\\02_Java Projects\\Imperialism Remake\\tools\\s0.imported.map");

        chooseImportmapButton.setText("...");
        chooseImportmapButton.setToolTipText("Choose import map file");
        chooseImportmapButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                chooseImportmapButtonActionPerformed(evt);
            }
        });

        scenarioTextField.setText("C:\\40_Programmieren\\02_Java Projects\\Imperialism Remake\\tools\\scenario.Europe1814.xml");
        scenarioTextField.setToolTipText("Will be modified in the process!");

        chooseScenarioButton.setText("...");
        chooseScenarioButton.setToolTipText("Choose scenario file");
        chooseScenarioButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                chooseScenarioButtonActionPerformed(evt);
            }
        });

        importButton.setText("Import Now");
        importButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                importButtonActionPerformed(evt);
            }
        });

        statusTextArea.setColumns(20);
        statusTextArea.setFont(new Font("Tahoma", 0, 11)); // NOI18N
        statusTextArea.setRows(5);
        statusTextArea.setText("status");
        statusScrollPane.setViewportView(statusTextArea);

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(Alignment.LEADING)
                            .addComponent(progressBar, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(Alignment.TRAILING)
                                    .addComponent(scenarioTextField)
                                    .addComponent(importmapTextField))
                                .addPreferredGap(ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(Alignment.LEADING)
                                    .addComponent(chooseImportmapButton)
                                    .addComponent(chooseScenarioButton, Alignment.TRAILING)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(248, 248, 248)
                        .addComponent(importButton)
                        .addGap(0, 253, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(statusScrollPane)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(importmapTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(chooseImportmapButton))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(scenarioTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(chooseScenarioButton))
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(statusScrollPane, GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE)
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(importButton)
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(progressBar, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void chooseImportmapButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_chooseImportmapButtonActionPerformed
        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File f = fileChooser.getSelectedFile();
            String name = f.getPath();
            importmapTextField.setText(name);
        }
    }//GEN-LAST:event_chooseImportmapButtonActionPerformed

    private void chooseScenarioButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_chooseScenarioButtonActionPerformed
        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File f = fileChooser.getSelectedFile();
            String name = f.getPath();
            scenarioTextField.setText(name);
        }
    }//GEN-LAST:event_chooseScenarioButtonActionPerformed

    private void importButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_importButtonActionPerformed
        progressBar.setValue(0);

        // test files if they exist
        File importFile = new File(importmapTextField.getText());
        if (!importFile.exists() || !importFile.isFile()) {
            updateStatus("import file not found, will stop");
            return;
        }

        File exportFile = new File(scenarioTextField.getText());
        if (!exportFile.exists() || !exportFile.isFile()) {
            updateStatus("export file not found, will stop");
            return;
        }

        // read map import
        ByteBuffer bb;
        try {
            FileInputStream is = new FileInputStream(importFile);
            FileChannel ic = is.getChannel();
            bb = ByteBuffer.allocate((int) ic.size());
            ic.read(bb);
        } catch (IOException ex) {
            updateStatus("could not read import file, will stop");
            return;
        }
        bb.rewind();
        bb.order(ByteOrder.LITTLE_ENDIAN);
        IntBuffer ib = bb.asIntBuffer();
        progressBar.setValue(10);

        // analyze map import
        int columns = ib.get();
        int rows = ib.get();
        if (columns < 0 || columns > 200 || rows < 0 || rows > 200) {
            updateStatus("values for columns/rows out of bounds, will stop");
            return;
        }
        int size = 4 * columns * rows;
        if (size != ib.remaining()) {
            updateStatus("size of input data not correct, will stop");
            return;
        }

        int chunk = columns * rows;

        int[] terrain_underlay = new int[chunk];
        ib.get(terrain_underlay);

        int[] terrain_overlay = new int[chunk];
        ib.get(terrain_overlay);

        int[] resources = new int[chunk];
        ib.get(resources);

        int[] provinces = new int[chunk];
        ib.get(provinces);
        progressBar.setValue(20);

        updateStatus("conversion successful");
        progressBar.setValue(100);
    }//GEN-LAST:event_importButtonActionPerformed

    private void updateStatus(String message) {
        statusTextArea.setText(statusTextArea.getText() + "\r\n" + message);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        LookAndFeel.setSystemLookAndFeel();

        /* Create and display the form */
        EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new OriginalMapImportApp().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JButton chooseImportmapButton;
    private JButton chooseScenarioButton;
    private JButton importButton;
    private JTextField importmapTextField;
    private JProgressBar progressBar;
    private JTextField scenarioTextField;
    private JScrollPane statusScrollPane;
    private JTextArea statusTextArea;
    // End of variables declaration//GEN-END:variables
}
