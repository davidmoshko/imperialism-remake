/*
 * Copyright (C) 2012 Trilarion
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.iremake.network;

import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.ScrollPaneConstants;
import javax.swing.WindowConstants;
import org.iremake.client.network.ClientManager;
import org.iremake.server.network.ServerManager;
import org.tools.ui.helper.LookAndFeel;

/**
 * Tests the Client and Server via a graphical user interface, and some logging
 * output to some text areas.
 */
public class ClientServerSniffer extends JFrame {

    private ServerManager server;
    private ClientManager client;

    /**
     * Creates new form ClientServerSniffer
     */
    public ClientServerSniffer() {
        initComponents();

        // client and server manager
        server = new ServerManager();
        client = new ClientManager();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        serverStatus = new JLabel();
        serverStart = new JButton();
        serverStop = new JButton();
        serverScrollPane = new JScrollPane();
        serverTextArea = new JTextArea();
        clientStatus = new JLabel();
        clientStart = new JButton();
        clientRegister = new JButton();
        clientScrollPane = new JScrollPane();
        clientTextArea = new JTextArea();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setTitle("Client Server Sniffer");
        setLocationByPlatform(true);
        setMinimumSize(new Dimension(600, 400));
        setResizable(false);

        serverStatus.setText("Server: down");

        serverStart.setText("Start");
        serverStart.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                serverStartActionPerformed(evt);
            }
        });

        serverStop.setText("Stop");
        serverStop.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                serverStopActionPerformed(evt);
            }
        });

        serverScrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        serverScrollPane.setMinimumSize(new Dimension(400, 200));

        serverTextArea.setColumns(20);
        serverTextArea.setRows(5);
        serverScrollPane.setViewportView(serverTextArea);

        clientStatus.setText("Clients: none");

        clientStart.setText("Start");
        clientStart.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                clientStartActionPerformed(evt);
            }
        });

        clientRegister.setText("Register");
        clientRegister.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                clientRegisterActionPerformed(evt);
            }
        });

        clientScrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        clientScrollPane.setMinimumSize(new Dimension(400, 200));

        clientTextArea.setColumns(20);
        clientTextArea.setRows(5);
        clientScrollPane.setViewportView(clientTextArea);

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(Alignment.TRAILING)
                    .addComponent(clientScrollPane, GroupLayout.DEFAULT_SIZE, 800, Short.MAX_VALUE)
                    .addComponent(serverScrollPane, GroupLayout.DEFAULT_SIZE, 800, Short.MAX_VALUE)
                    .addComponent(serverStatus, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(clientStatus, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(Alignment.TRAILING)
                            .addGroup(Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(serverStart)
                                .addPreferredGap(ComponentPlacement.RELATED)
                                .addComponent(serverStop))
                            .addGroup(Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(clientStart)
                                .addPreferredGap(ComponentPlacement.RELATED)
                                .addComponent(clientRegister)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(serverStatus)
                .addPreferredGap(ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(serverStart)
                    .addComponent(serverStop))
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(serverScrollPane, GroupLayout.PREFERRED_SIZE, 200, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(clientStatus)
                .addPreferredGap(ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(clientStart)
                    .addComponent(clientRegister))
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(clientScrollPane, GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void serverStartActionPerformed(ActionEvent evt) {//GEN-FIRST:event_serverStartActionPerformed
        if (!server.start()) {
            serverMessage("Server could not start.");
        } else {
            serverMessage("Server started.");
            serverStatus.setText("Server: up");
        }
    }//GEN-LAST:event_serverStartActionPerformed

    private void serverStopActionPerformed(ActionEvent evt) {//GEN-FIRST:event_serverStopActionPerformed
        server.stop();
        serverMessage("Server stopped.");
        serverStatus.setText("Server: down");
    }//GEN-LAST:event_serverStopActionPerformed

    private void clientStartActionPerformed(ActionEvent evt) {//GEN-FIRST:event_clientStartActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_clientStartActionPerformed

    private void clientRegisterActionPerformed(ActionEvent evt) {//GEN-FIRST:event_clientRegisterActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_clientRegisterActionPerformed
    private int counter = 0;

    private void serverMessage(String message) {
        counter++;
        String text = serverTextArea.getText();
        serverTextArea.setText(counter + ": " + message + "\r\n" + text);
    }

    private void clientMessage(String message) {
        counter++;
        String text = clientTextArea.getText();
        clientTextArea.setText(counter + ": " + message + "\r\n" + text);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        LookAndFeel.setSystemLookAndFeel();

        /* Create and display the form */
        EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new ClientServerSniffer().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JButton clientRegister;
    private JScrollPane clientScrollPane;
    private JButton clientStart;
    private JLabel clientStatus;
    private JTextArea clientTextArea;
    private JScrollPane serverScrollPane;
    private JButton serverStart;
    private JLabel serverStatus;
    private JButton serverStop;
    private JTextArea serverTextArea;
    // End of variables declaration//GEN-END:variables
}
