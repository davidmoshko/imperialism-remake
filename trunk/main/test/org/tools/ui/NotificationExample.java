/*
 * Copyright (C) 2011 Trilarion
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.tools.ui;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.BorderFactory;
import javax.swing.ButtonGroup;
import javax.swing.DefaultComboBoxModel;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JTextField;
import javax.swing.JToggleButton;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.SwingUtilities;
import javax.swing.WindowConstants;
import org.tools.io.TestIOManager;
import org.tools.ui.layout.RelativeLayoutConstraint;
import org.tools.ui.notification.NotificationDialog;
import org.tools.ui.notification.NotificationFactory;
import org.tools.ui.notification.NotificationListener;
import org.tools.ui.utils.IconLoader;
import org.tools.ui.utils.LookAndFeel;
import org.tools.ui.utils.WindowCorner;

/**
 * Notification dialogs/panes example.
 */
public class NotificationExample extends JFrame implements NotificationListener {

    private static final long serialVersionUID = 1L;
    private static IconLoader loader = TestIOManager.getAsLoader();

    /**
     * Creates new form NotificationExampl
     */
    public NotificationExample() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        positionGroup = new ButtonGroup();
        showDialogButton = new JButton();
        messageTextField = new JTextField();
        decorationComboBox = new JComboBox();
        positionPanel = new JPanel();
        framePositionRadioButton = new JRadioButton();
        desktopPositionRadioButton = new JRadioButton();
        desktopOrientationComboBox = new JComboBox();
        frameOrientationComboBox = new JComboBox();
        fadePanel = new JPanel();
        fadeInToggleButton = new JToggleButton();
        fadeOutToggleButton = new JToggleButton();
        fadeInTextField = new JTextField();
        fadeOutTextField = new JTextField();
        onTimeLabel = new JLabel();
        onTimeTextField = new JTextField();
        statusLabel = new JLabel();
        effectsComboBox = new JComboBox();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setTitle("Notification Example");
        setLocationByPlatform(true);
        setResizable(false);

        showDialogButton.setText("Show Dialog notification");
        showDialogButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                showDialogButtonActionPerformed(evt);
            }
        });

        messageTextField.setText("<html><a href=\"http://www.google.com\">Something</a> has happened.</html>");

        decorationComboBox.setModel(new DefaultComboBoxModel(new String[] { "Simple Line", "Ballon" }));
        decorationComboBox.setToolTipText("notification decoration");

        positionPanel.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0)));

        positionGroup.add(framePositionRadioButton);
        framePositionRadioButton.setText("Position relative to frame");

        positionGroup.add(desktopPositionRadioButton);
        desktopPositionRadioButton.setSelected(true);
        desktopPositionRadioButton.setText("Position relative to desktop");

        desktopOrientationComboBox.setModel(new DefaultComboBoxModel(new String[] { "NorthWest", "NorthEast", "SouthWest", "SouthEast" }));

        frameOrientationComboBox.setModel(new DefaultComboBoxModel(new String[] { "NorthWest", "NorthEast", "SouthWest", "SouthEast" }));

        GroupLayout positionPanelLayout = new GroupLayout(positionPanel);
        positionPanel.setLayout(positionPanelLayout);
        positionPanelLayout.setHorizontalGroup(
            positionPanelLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(positionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(positionPanelLayout.createParallelGroup(Alignment.LEADING)
                    .addComponent(desktopPositionRadioButton)
                    .addComponent(framePositionRadioButton))
                .addGap(47, 47, 47)
                .addGroup(positionPanelLayout.createParallelGroup(Alignment.LEADING)
                    .addComponent(frameOrientationComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(desktopOrientationComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        positionPanelLayout.setVerticalGroup(
            positionPanelLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(positionPanelLayout.createSequentialGroup()
                .addGroup(positionPanelLayout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(frameOrientationComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(framePositionRadioButton))
                .addPreferredGap(ComponentPlacement.RELATED)
                .addGroup(positionPanelLayout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(desktopOrientationComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(desktopPositionRadioButton)))
        );

        fadePanel.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0)));

        fadeInToggleButton.setText("Fade in");

        fadeOutToggleButton.setText("Fade out");

        fadeInTextField.setText("2");
        fadeInTextField.setToolTipText("Fade in time / seconds");

        fadeOutTextField.setText("2");
        fadeOutTextField.setToolTipText("Fade out time / seconds");

        GroupLayout fadePanelLayout = new GroupLayout(fadePanel);
        fadePanel.setLayout(fadePanelLayout);
        fadePanelLayout.setHorizontalGroup(
            fadePanelLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(fadePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(fadePanelLayout.createParallelGroup(Alignment.LEADING, false)
                    .addComponent(fadeInToggleButton, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(fadeOutToggleButton, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(fadePanelLayout.createParallelGroup(Alignment.LEADING)
                    .addGroup(fadePanelLayout.createSequentialGroup()
                        .addPreferredGap(ComponentPlacement.UNRELATED)
                        .addComponent(fadeOutTextField, GroupLayout.PREFERRED_SIZE, 26, GroupLayout.PREFERRED_SIZE))
                    .addGroup(fadePanelLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(fadeInTextField)))
                .addGap(271, 271, 271))
        );
        fadePanelLayout.setVerticalGroup(
            fadePanelLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(fadePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(fadePanelLayout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(fadeInToggleButton)
                    .addComponent(fadeInTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(ComponentPlacement.RELATED)
                .addGroup(fadePanelLayout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(fadeOutToggleButton)
                    .addComponent(fadeOutTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        onTimeLabel.setText("Time on");

        onTimeTextField.setText("0");
        onTimeTextField.setToolTipText("Insert 0 for infinite on time");

        statusLabel.setBackground(new Color(255, 255, 255));
        statusLabel.setText("Status");
        statusLabel.setOpaque(true);

        effectsComboBox.setModel(new DefaultComboBoxModel(new String[] { "None", "Shadow", "Mouse over" }));

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(decorationComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(ComponentPlacement.RELATED)
                                .addComponent(effectsComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(onTimeLabel)
                                .addPreferredGap(ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(Alignment.LEADING)
                                    .addComponent(showDialogButton)
                                    .addComponent(onTimeTextField, GroupLayout.PREFERRED_SIZE, 22, GroupLayout.PREFERRED_SIZE))))
                        .addGap(221, 221, 221))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(Alignment.LEADING)
                            .addComponent(positionPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(messageTextField, GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(fadePanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
            .addComponent(statusLabel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(messageTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(decorationComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(effectsComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(positionPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(fadePanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(onTimeLabel)
                    .addComponent(onTimeTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addComponent(showDialogButton)
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(statusLabel))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void showDialogButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_showDialogButtonActionPerformed
        // get the message
        String message = messageTextField.getText();
        NotificationDialog dlg = NotificationFactory.createDlg(message, loader, this, this);

        // get the decoration
        int decorationIndex = decorationComboBox.getSelectedIndex();

        if (fadeInToggleButton.isSelected()) {
            int fadeInTime = Integer.parseInt(fadeInTextField.getText()) * 1000; // conversion seconds to ms
            dlg.setFadeInTime(fadeInTime);
        }

        if (fadeOutToggleButton.isSelected()) {
            int fadeOutTime = Integer.parseInt(fadeOutTextField.getText()) * 1000;
            dlg.setFadeOutTime(fadeOutTime);
        }

        int onTime = Integer.parseInt(onTimeTextField.getText().toString()) * 1000;
        if (onTime > 0) {
            dlg.setOnTime(onTime);
        }

        // get the position handling
        if (framePositionRadioButton.isSelected()) {
            WindowCorner corner = WindowCorner.NorthWest;
            switch (frameOrientationComboBox.getSelectedIndex()) {
            case 1:
                corner = WindowCorner.NorthEast;
                break;
            case 2:
                corner = WindowCorner.SouthWest;
                break;
            case 3:
                corner = WindowCorner.SouthEast;
                break;
            }
            dlg.setLocationRelativeTo(this, RelativeLayoutConstraint.corner(corner, 5, 5));


        } else if (desktopPositionRadioButton.isSelected()) {
            WindowCorner corner = WindowCorner.NorthWest;
            switch (desktopOrientationComboBox.getSelectedIndex()) {
            case 1:
                corner = WindowCorner.NorthEast;
                break;
            case 2:
                corner = WindowCorner.SouthWest;
                break;
            case 3:
                corner = WindowCorner.SouthEast;
                break;
            }
            dlg.setLocationRelativeToDesktop(corner, 5, 5);
        }

        dlg.setVisible();
    }//GEN-LAST:event_showDialogButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        LookAndFeel.setSystemLookAndFeel();
        /* Create and display the form */
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                new NotificationExample().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JComboBox decorationComboBox;
    private JComboBox desktopOrientationComboBox;
    private JRadioButton desktopPositionRadioButton;
    private JComboBox effectsComboBox;
    private JTextField fadeInTextField;
    private JToggleButton fadeInToggleButton;
    private JTextField fadeOutTextField;
    private JToggleButton fadeOutToggleButton;
    private JPanel fadePanel;
    private JComboBox frameOrientationComboBox;
    private JRadioButton framePositionRadioButton;
    private JTextField messageTextField;
    private JLabel onTimeLabel;
    private JTextField onTimeTextField;
    private ButtonGroup positionGroup;
    private JPanel positionPanel;
    private JButton showDialogButton;
    private JLabel statusLabel;
    // End of variables declaration//GEN-END:variables

    @Override
    public void notificationResult(boolean accepted) {
        if (accepted == true) {
            statusLabel.setText("Status: Notification clicked - accepted");
        } else {
            statusLabel.setText("Status: Notification clicked - cancelled");
        }
    }
}
