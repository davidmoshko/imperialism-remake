#summary Coding standards/rules.
#labels Phase-Implementation

For now as unformatted list:

  * Each (significant) submission will be reviewed by another team member who might modify it further
  * Tests have to be programmed for all major parts. Code has to be tested before comittal to reduce bugs and ensure functionality.
  * Code that does not compile should not be commited.
  * Javadoc has to be added for all methods/classes/interfaces at submission level. At the latest when the class has matured extensive documentation is a must.
  * Always add the GPLv3+ header to new files. Also add name and creation year. They indicate your consent to the open source license.
  * A task driven development (using a Kanban board or so) with short tasks (minutes to one hour) is preferred.
  * If chats are conducted, the log will be archived somewhere without any private information.
  * Everything is conducted in the most simple and straightforward way. If a well supported/mature library is available, which is not too complex or overpowered on it's own, we will always prefer it to coding self.
  * Minor tasks will have minor priority. Top priority is always to make the game running, everything else comes later.
  * We will not sacrifice clarity for a fast hack. A hack that works somehow but cannot be sufficiently explained or a hack that requires cumbersome or unmotivated modifications should be rejected and the code should be redesigned instead.